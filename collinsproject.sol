// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "@openzeppelin/contracts/utils/cryptography/ECDSA.sol";

interface ICrossChainMessenger {
    function sendMessage(uint256 destinationChainId, address recipient, bytes memory message) external;
    function receiveMessage(uint256 sourceChainId, address sender, bytes memory message) external;
} 
contract BridgeContract is ReentrancyGuard {
    using ECDSA for bytes32;

    address public owner;
    IERC20 public token;
    ICrossChainMessenger public crossChainMessenger;
    uint256 public constant MIN_TRANSFER_AMOUNT = 1e18; // 1 token
    uint256 public constant MAX_TRANSFER_AMOUNT = 1000e18; // 1000 tokens

    mapping(bytes32 => bool) public processedTransfers;
    mapping(address => bool) public authorizedValidators;

    event TokensLocked(address indexed from, uint256 amount, bytes32 transferId, uint256 destinationChainId);
    event TokensUnlocked(address indexed to, uint256 amount, bytes32 transferId, uint256 sourceChainId);
    event ValidatorAdded(address indexed validator);
    event ValidatorRemoved(address indexed validator);
    event CrossChainMessageSent(uint256 destinationChainId, bytes32 transferId);
    event CrossChainMessageReceived(uint256 sourceChainId, bytes32 transferId);


















































































































































































































































































